NOM = readline
INCLUDE = <stdio.h> / <readline/readline.h>
DECLARATION = char	*readline(const char prompt)
MAN = permet de lire une ligne à partir de l'entrée standard.

--------------------------------------------------

NOM = addhistory
INCLUDE = <stdio.h> / <readline/history.h>
DECLARATION = void	readline(const char)
MAN = permet de stocker l'historique des commandes.

--------------------------------------------------

NOM = printf
INCLUDE = <stdio.h>

--------------------------------------------------

NOM = malloc
INCLUDE = <stdlib.h>

--------------------------------------------------

NOM = free
INCLUDE = <stdlib.h>

--------------------------------------------------

NOM = write
INCLUDE = <unistd.h>

--------------------------------------------------

NOM = access
INCLUDE = <unistd.h>
DECLARATION = int access(const char *path, int mode)
MAN = permet de vérifier si un processus a les permissions d'accès spécifiées à un fichier ou à un répertoire.
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur.

--------------------------------------------------

NOM = open
INCLUDE = <fcntl.h>
DECLARATION = int open(const char *path, int flags, int mode)
MAN = permet d'ouvrir un fichier existant ou créer un nouveau fichier si le fichier spécifié n'existe pas.
		Elle renvoie -1 si il y a une erreur et une valeur positive si c'est OK.

--------------------------------------------------

NOM = read
INCLUDE = <unistd.h>
DECLARATION = size_t	read(int fd, void *buf, size_t count)
MAN = permet de lire des données à partir d'un descripteur de fichier.
	Elle renvoie -1 si il y a une erreur, 0 si il n'y a plus rien a lire et une valeur positive si c'est OK.

--------------------------------------------------

NOM = close
INCLUDE = <unistd.h>
DECLARATION = int	close(int fd)
MAN = permet de fermer un descripteur de fichier ouvert précédemment.
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur. 

--------------------------------------------------

NOM = fork
INCLUDE = <unistd.h>
DECLARATION = pid_t fork(void)
MAN = permet de creer un nouveau processus
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur. 

--------------------------------------------------

NOM = wait
INCLUDE = <sys/wait.h>
DECLARATION = pid_t	wait(int *status)
MAN = lors de la creation de plusieurs processus, wait permet d'attendre la fin d'un processus enfant.
		Elle renvoie le PID du processus enfant termine si c'est OK et -1 si il y a une erreur.

--------------------------------------------------

NOM = waitpid
INCLUDE = <sys/wait.h>
DECLARATION = int	waitpid(idtype_t idtype, id_t id, int options)
MAN = Meme fonctionnement que la fonction wait(), mais permet de precise le processus enfant a attendre

--------------------------------------------------

NOM = wait3
INCLUDE = <sys/wait.h>
DECLARATION = pid_t	wait3(int *status, int options, struct rusage *rusage)
MAN = Meme fonctionnement que wait(), mais elle inclut également des informations sur l'utilisation des ressources par le processus enfant.

--------------------------------------------------

NOM = wait4
INCLUDE = <sys/wait.h>
DECLARATION = pid_t	wait4(pid_t pid, int *status, int options, struct rusage *rusage)
MAN = Meme fonctionnement que waitpid(), mais elle inclut également des informations sur l'utilisation des ressources par le processus enfant.

--------------------------------------------------

NOM = signal
INCLUDE = <signal.h>
DECLARATION = sighandler_t signal(int signum, sighandler_t hamdler)
MAN = 

--------------------------------------------------

NOM = sigaction
INCLUDE = <signal.h>
DECLARATION = int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)
MAN = 

--------------------------------------------------

NOM = sigemptyset
INCLUDE = <signal.h>
DECLARATION = int sigemptyset(sigset_t *set)
MAN = 

--------------------------------------------------

NOM = sigaddset
INCLUDE = <signal.h>
DECLARATION = int sigaddset(sigset_t *set, int signo)
MAN = 

--------------------------------------------------

NOM = kill
INCLUDE = <signal.h>
DECLARATION = int	kill(pid_t pid, int sig)
MAN = 

--------------------------------------------------

NOM = exit
INCLUDE = <stdlib.h>
DECLARATION = void	exit(int status)
MAN = permet de terminer l'exécution du programme en cours et renvoyer un code de sortie au système d'exploitation.

--------------------------------------------------

NOM = getcwd
INCLUDE = <unistd.h>
DECLARATION = char	*getcwd(char *buf, size_t size)
MAN = permet d'obtenir le répertoire de travail actuel du processus en cours.

--------------------------------------------------

NOM = chdir
INCLUDE = <unistd.h>
DECLARATION = int chdir(const char *path)
MAN = permet de changer le répertoire de travail courant du processus en cours vers un répertoire spécifié.
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur. 

--------------------------------------------------

NOM = stat
INCLUDE = <unistd.h>
DECLARATION = int stat(const char *pathname, struct stat *buf)
MAN = permet d'obtenir des informations sur un fichier spécifié par son nom de chemin. Ces informations incluent 
des détails tels que les permissions du fichier, le propriétaire, la taille du fichier, le type de fichier, etc.
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur. 

--------------------------------------------------

NOM = lstat
INCLUDE = <unistd.h>
DECLARATION = int lstat(const char *pathname, struct stat *buf)
MAN = permet d'obtenir des informations sur un fichier ou un lien symbolique.
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur. 

--------------------------------------------------

NOM = fstat
INCLUDE = <unistd.h>
DECLARATION = int fstat(int fd, struct stat *buf)
MAN = permet d'obtenir des informations sur un descripteur de fichier spécifié. 
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur.

--------------------------------------------------

NOM = unlink
INCLUDE = <unistd.h>
DECLARATION = int unlink(const char *pathname)
MAN = permet de supprimer un fichier existant du système de fichiers en supprimant son entrée de répertoire. 
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur.

--------------------------------------------------

NOM = execve
INCLUDE = <unistd.h>
DECLARATION = int execve(const char *filename, char **const argv, char const **envp)
MAN = permet d'exécuter un programme dans le contexte du processus appelant.
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur.

--------------------------------------------------

NOM = dup
INCLUDE = <unistd.h>
DECLARATION = int dup(int oldfd)
MAN = permet de dupliquer un descripteur de fichier existant.

--------------------------------------------------

NOM = dup2
INCLUDE = <unistd.h>
DECLARATION = int dup2(int oldfd, int newfd)
MAN = Meme fonctionnement que dup(), mais permet de dupliquer un descripteur de fichier vers un descripteur spécifié.

--------------------------------------------------

NOM = pipe
INCLUDE = <unistd.h>
DECLARATION = int	pipe(int pipefd[2])
MAN = permet de créer un canal de communication bidirectionnel entre deux processus.
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur.

--------------------------------------------------

NOM = opendir
INCLUDE = <sys/types.h> / <dirent.h>
DECLARATION = DIR	*opendir(const char *name)
MAN = permet d'ouvrir un répertoire spécifié par son nom de chemin.

--------------------------------------------------

NOM = readdir
INCLUDE = <dirent.h>
DECLARATION = int readdir(DIR *dir, struct dirent *entry, struct dirent **result)
MAN = permet de lire les entrées d'un répertoire ouvert précédemment à l'aide de la fonction opendir().

--------------------------------------------------

NOM = closedir
INCLUDE = <sys/types.h> / <dirent.h>
DECLARATION = int	closedir(DIR *dir)
MAN = permet de fermer un répertoire ouvert précédemment à l'aide de la fonction opendir().

--------------------------------------------------

NOM = strerror
INCLUDE = <string.h>
DECLARATION = char	*strerror(int errnum)
MAN = permet d'obtenir une chaîne de caractères décrivant un message d'erreur associé à un code d'erreur spécifique.

--------------------------------------------------

NOM = perror
INCLUDE = <stdio.h>
DECLARATION = void	perror(const char *str)
MAN = permet d'afficher un message d'erreur associé à la valeur de la variable errno actuelle.

--------------------------------------------------

NOM = isatty
INCLUDE = <unistd.h>
DECLARATION = int isatty(int desc)
MAN = permet de vérifie si un descripteur de fichier donné correspond à un terminal interactif.
		Elle renvoie 1 si le descripteur correspond a un fichier, sinon 0.

--------------------------------------------------

NOM = ttyname
INCLUDE = <unistd.h>
DECLARATION = char *ttyname(int fd)
MAN = permet d'obtenir le nom du terminal associé à un descripteur de fichier de terminal donné.

--------------------------------------------------

NOM = ttyslot
INCLUDE = <unistd.h>
DECLARATION = int ttyslot(void)
MAN = permet de déterminer l'emplacement (slot) du terminal dans la table des terminaux.
		Elle renvoie l'emplacemet du slot, ou 0 si aucun terminal n'est associe au processus, ou si une erreur se produit.

--------------------------------------------------

NOM = ioctl
INCLUDE = <sys/ioctl.h>
DECLARATION = int ioctl(int d, int requete)
MAN = permet de contrôler divers aspects d'un périphérique ou d'un descripteur de fichier,
 en envoyant des commandes spécifiques à un périphérique ou à un fichier..
		Elle renvoie 0 si c'est OK et -1 si il y a une erreur.

--------------------------------------------------

NOM = getenv
INCLUDE = <stdlib.h>
DECLARATION = char	*getenv(const char *name)
MAN = obtenir la valeur d'une variable d'environnement spécifique à partir de son nom.

--------------------------------------------------

NOM = tcsetattr
INCLUDE = <unistd.h> / <termios.h>
DECLARATION = int tcsetattr(int fd, int optional_actions, const struct termios *termios_p)
MAN = 

--------------------------------------------------

NOM = tcgetattr
INCLUDE = <unistd.h> / <termios.h>
DECLARATION = int	tcgetattr(int fd, struct termios *termios_p)
MAN = 

--------------------------------------------------

NOM = tgetent
INCLUDE = <curses.h> / <term.h>
DECLARATION = int tgetent(char *bp, const char *name)
MAN = 

--------------------------------------------------

NOM = tgetflag
INCLUDE = <curses.h> / <term.h>
DECLARATION = int tgetflag(const char *id)
MAN = 

--------------------------------------------------

NOM = tgetnum
INCLUDE = <curses.h> / <term.h>
DECLARATION =int	tgetnum(const char *id)
MAN = 

--------------------------------------------------

NOM = tgetstr
INCLUDE = <curses.h> / <term.h>
DECLARATION = char	*tgetstr(const char *id, char **area)
MAN = 

--------------------------------------------------

NOM = tgoto
INCLUDE = <curses.h> / <term.h>
DECLARATION = char	*tgoto(const char *cap, int col, int row)
MAN = 

--------------------------------------------------

NOM = tputs
INCLUDE = <curses.h> / <term.h>
DECLARATION = int tputs(const char *str, int affcnt, int (*putc)(int))
MAN = 

--------------------------------------------------